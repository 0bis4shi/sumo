# This is a basic workflow to help you get started with Actions

name: build-fmi-linux

on: 
  push:            # run on push events
    paths-ignore:  # but ignore everything in the docs subfolder 
      - 'docs/**'
  pull_request:    # run on pull requests
    paths-ignore:  # but ignore everything in the docs subfolder 
      - 'docs/**'
          

jobs:
  
  ###########################
  # BUILDING ON OSX
  ###########################
  build-osx:
    runs-on: macos-latest
    strategy:
      # Allow all other matrix-jobs to continue running, even if one of the jobs fails
      fail-fast: false
      matrix:
        build_type: [full, minimal]

    steps:
    - name: Cloning SUMO
      uses: actions/checkout@v2
      with:
        path: sumo

    - name: Fetching SUMO tags
      run: |
        cd sumo
        git fetch --prune --unshallow
        
    - name: Preparing Build System
      run: |
        brew update
        brew cask install xquartz
        brew install xerces-c fox proj gdal gl2ps 
        
    - name: Preparing Gtest
      run: |
        git clone https://github.com/google/googletest
        cd googletest
        git checkout release-1.10.0
        mkdir build
        cd build
        cmake ..
        make
        make install
        
    - name: Building SUMO
      run: |
        mkdir -p sumo/cmake-build 
        cd sumo/cmake-build 
        if [[ "${{ matrix.build_type }}" == "full" ]]; then cmake -DFMI=ON ..; fi
        if [[ "${{ matrix.build_type }}" == "minimal" ]]; then cmake -DFMI=ON -DFOX_CONFIG= -DPROJ_LIBRARY= -DCHECK_OPTIONAL_LIBS=OFF ..; fi 
        make
    
    - name: Installing SUMO
      run: |
        cd sumo/cmake-build 
        sudo make install
        
    - name: Building FMU Compliance Checker
      run: |
        git clone https://github.com/modelica-tools/FMUComplianceChecker.git fmuChecker
        cd fmuChecker
        mkdir build
        cd build
        cmake ../
        make install test
        
    - name: Checking sumo-fmi2.fmu
      run: |
        ./fmuChecker/install/fmuCheck.darwin64 sumo/bin/sumo-fmi2-darwin64.fmu
    
  ###########################
  # BUILDING ON LINUX
  ###########################
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      # Allow all other matrix-jobs to continue running, even if one of the jobs fails
      fail-fast: false
      matrix:
        build_type: [full, minimal]
        compiler: [gcc, clang]

    steps:
    - name: Cloning SUMO
      uses: actions/checkout@v2
      with:
        path: sumo

    - name: Fetching SUMO tags
      run: |
        cd sumo
        git fetch --prune --unshallow
        
    - name: Preparing Build System
      run: |
        sudo apt-get update 
        sudo apt-get install cmake libeigen3-dev libxerces-c-dev libfox-1.6-dev libgdal-dev libproj-dev libgtest-dev libgoogle-perftools-dev libgl2ps-dev python3-dev python3-setuptools swig openjdk-8-jdk maven ccache
        sudo pip3 install texttest
        
    - name: Preparing Gtest
      run: |
        pushd /usr/src/gtest
        sudo mkdir build
        cd build
        if [[ "${{ matrix.compiler }}" == "gcc" ]]; then sudo CC=gcc CXX=g++ cmake ..; fi
        if [[ "${{ matrix.compiler }}" == "clang" ]]; then sudo CC=clang CXX=clang++ cmake ..; fi
        sudo make
        sudo cp libgtest* /usr/lib/
        
    - name: Building SUMO
      run: |
        mkdir -p sumo/cmake-build 
        cd sumo/cmake-build 
        if [[ "${{ matrix.compiler }}" == "gcc" ]]; then export CC=gcc; export CXX=g++; fi
        if [[ "${{ matrix.compiler }}" == "clang" ]]; then export CC=clang; export CXX=clang++; fi
        if [[ "${{ matrix.build_type }}" == "full" ]]; then cmake -DFMI=ON ..; fi
        if [[ "${{ matrix.build_type }}" == "minimal" ]]; then cmake -DFMI=ON -DFOX_CONFIG= -DPROJ_LIBRARY= -DCHECK_OPTIONAL_LIBS=OFF ..; fi 
        make fmi
    
    - name: Building FMU Compliance Checker
      run: |
        git clone https://github.com/modelica-tools/FMUComplianceChecker.git fmuChecker
        cd fmuChecker
        mkdir build
        cd build
        cmake ..
        make install test
        
    - name: Checking sumo-fmi2.fmu
      run: |
        cd sumo
        ../fmuChecker/install/fmuCheck.linux64 bin/sumo-fmi2-linux64.fmu
        
   
   
